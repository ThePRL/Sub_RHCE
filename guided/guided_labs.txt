Chapter 5: Deploying Files to a managed host

Section 5.2: Modifying and Copying Files to Hosts
- Outcomes: 
	- Retrieve files from managed hosts, by host name, and store them locally
	- Create playbooks that use common file management modules from the 'ansible.builtin' collection. Such as:
		- copy
		- file
		- lineinfile
		- blockinfile

- Step 1: "lab start file-manage; cd file-manage"

- Step 2: Create a playbook called "secure_log_backups.yml" and have it do the following:
	- Use the ansible.builtin.fetch module to retrieve the /var/log/secure log from each of the managed hosts and store them on the control node. 
	- The playbook should create the 'secure-backups' dir with subdirectories named after the host name of each managed host.
	- Store the backup files in their respective subdirectories

- Step 2.1: Run the playbook.

- Step 3: Create the copy_file.yml playbook in the current working directory. Configure a play in the playbook that connects as the root user and copies the /home/student/file-manage/files/users.txt file to all managed hosts. 
	- File must have the following parameters:
		- src: files/users.txt
		- dest: /home/devops/users.txt
		- owner: devops
		- group: devops
		- mode: u+rw, g-wx, o-rwx
		- setype: samba_share_t
- Step 3.1: SSH to servera > verify selinux attributes on users.txt with 'ls -Z'

- Step 4: In the preceding step, the users.txt file received 'samba_share_t' for SELinux type. In "selinux_defaults.yml", configure a play that uses 'ansible.builtin.file' module to set the default SELinux context on the file /home/devops/users.txt for 'user, role, type, and level' 

- Step 5: Create playbook "add_line.yml", configure it to use the 'ansible.builtin.lineinfile' module to append the line "This line was added by the lineinfile module. to /home/devops/users.txt file on all managed hosts. 

- Step 6: Create playbook "add_block.yml", configure it to use the 'ansible.builtin.blockinfile' module to append the following block of text to the /home/devops/users.txt file on all managed hosts:

This block of text consists of two lines.
They have been added by the blockinfile module.

- Step 7: Create playbook "remove_file.yml", configure it to use the 'ansible.builtin.file' module to remove the /home/devops/users.txt file from all managed hosts 

- Step 8: 'lab finish file-manage'

Section 5.2: Deploying Custom Files with Jinja2 Templates
- Outcomes:
	- Build a template file
	- use the template file in a playbook

- Step 1: 'lab start file-template; cd file-template' 

- Step 2: 
	- Note: Your inventory file contains two groups: webservers and workstations
		- servera is in the webservers group and workstation is in teh workstations group
	- Note: Your ansible.cfg file also states:
ansible_managed = Ansible managed: modified on %Y-%m-%d %H:%M:%S
	- Create a template for the "Message of the Day" file(/etc/motd) and save it as "motd.j2" 
	- Include the following variables and facts in the template:
		- ansible_facts['fqdn']
		- ansible_facts['distribution'] 
		- ansible_facts['distribution_version']
		- system_owner, for the system owner's email. 
			- system_owner will be declared in the 'motd.yml' playbook. 

- Step 3: Create motd.yml:
	- First, define the variable 'system_owner'
	- Second, using ansible.builtin.template module, deploy the motd.j2 template. 
		- It must set the owner and group of /etc/motd to root and the mode to 0644

Section 5.4: I need to go back to do this one!

Section 6.2 - Selecting Hosts with Host Patterns

- I did this mod in the VM env as the lab was not needed

- Objectives: The goal of this lab is to bash the provided inventories (files/chapter6/62selectinghosts) with patterns (*,'', etc)

- Step 1: Verify the files work by running playbook.yml and seeing 'db1.example.com' hostname against inventory1

- Step 2: Change the targeted host in the playbook from 'db1.example.com' to '172.25.252.44' against inventory1

- Step 3: Change the targets host in the playbook from '172.25.252.44' to 'all' against inventory1

- Step 4: Change the targets host in the playbook from 'all' to all hosts that end with .example.com, against inventory1

- Step 5: Without accesssing the groups in the inventory1 file, modify the host pattern to list these three hosts from inventory1:
	- lb1.lab.example.com
	- s1.lab.example.com
	- db1.example.com
		- Note: This one is very direct and does not include any grep

- Step 6: Use wildcard to list hosts that start with a 172.25. IP on inventory1

- Step 7: Use host pattern to list all hosts that start with the letter "s" in inventory1
	- Interestingly, you will get one called file2.example.com and db2.example.com. This is because they are in a group that starts with 's' 

- Step 8: Using a list and wildcard host patterns, list all hosts in the 'prod' group, hosts with an UP address beginning with 172, and hosts that contain 'lab' in their name on inventory 1

- Step 9: List all hosts that belong to both the 'db' and 'london' groups on inventory1

- Step 10: Modify the hosts value in playbook.yml file so all servers in the london group are targeted. Run the playbook using the inventory2 file

- Step 11: Modify the hosts value in the playbook.yml file so that all servers in teh 'europe' nested group art targeted. Run the playbook using inventory2

- Step 12: Modify the hosts value in the playbook.yml file so that all servers that do not belong to any group are targeted using the inventory2 file.

- Step 13: Modify the hosts value in the playbook.yml file to specify a group that does not exist in the inventory2 file. 

Section 6.4 - Including and importing files: 

Objectives: Include task and playbook files in playbooks

- Step 1: 'lab start projects-file; cd ~/projects-file' 

- Step 2: Files placed in files dir. 

- Step 3: Create playbook.yml. Define the first play with the name Configure Web Server. The play should execute against servera.lab.example.com
	- In the first task, INCLUDE the 'environment.yml' task file
		- Be sure to define the variables in 'environment.yml'
	- In the second task, IMPORT the firewall.yml task file 
		- Be sure to define the variables in 'firewall.yml' 
		- you want to open up 'http' and 'https'
	- In the third task, import placeholder.yml task file
		- Set the file variable to /var/www/html/index.html.
	- In a new play, import test.yml PLAYBOOK
		- Be sure to define the variables in 'test.yml'
		- This will be different than importing the tasks 

- Step 4: Test and run 

- Step 5: 'lab finish projects-file' 
